// A. Значения функции
// Вася делает тест по математике: вычисляет значение функций в различных точках. Стоит отличная погода, и друзья зовут Васю гулять. 
// Но мальчик решил сначала закончить тест и только после этого идти к друзьям. К сожалению, Вася пока не умеет программировать. Зато вы умеете.
// Помогите Васе написать код функции, вычисляющей y = ax2 + bx + c. Напишите программу, которая будет по коэффициентам a, b, c и 
// числу x выводить значение функции в точке x.
// Формат ввода
// На вход через пробел подаются числа a, x, b, c. В конце ввода находится перенос строки.
// Формат вывода
// Выведите одно число — значение функции в точке x.

function TaskA(a, x, b, c){
  return (a*(x**2) + b * x + c)
}

// console.log(TaskA(-8, -5, -2, 7)) // -183
// console.log(TaskA(8, 2, 9, -10)) //40

// - * - *  - * - *   - * - *   - * - *   - * - *   - * - * 

// B. Чётные и нечётные числа
// Алла придумала такую онлайн-игру: игрок нажимает на кнопку, и на экране появляются три случайных числа.
// Если все три числа оказываются одной чётности, игрок выигрывает. Напишите программу, которая по трём числам определяет, выиграл игрок или нет.
// Формат ввода
// В первой строке записаны три случайных целых числа a, b и c. Числа не превосходят 109 по модулю.
// Формат вывода
// Выведите «WIN», если игрок выиграл, и «FAIL» в противном случае.

function TaskB(a, b, c){
  if(
    ( a % 2 === 0 &&
    b % 2 === 0 &&
    c % 2 === 0 
    ) || 
    ( a % 2 !== 0 &&
      b % 2 !== 0 &&
      c % 2 !== 0 
  )){
    return 'WIN'
  } else {
    return 'FAIL'
  }
}

// console.log(TaskB(1, 2, -3)) // FAIL
// console.log(TaskB(7, 11, 7	)) // WIN
// console.log(TaskB(6, -2, 0)) // WIN



// C. Соседи
// Дана матрица. Нужно написать функцию, которая для элемента возвращает всех его соседей. 
//Соседним считается элемент, находящийся от текущего на одну ячейку влево, вправо, вверх или вниз.
// Диагональные элементы соседними не считаются. Например, в матрице A соседними элементами для (0, 0) будут 2 и 0. А для (2, 1) –— 1, 2, 7, 7.

// Формат ввода
// В первой строке задано n — количество строк матрицы. Во второй — количество столбцов m. Числа m и n не превосходят 1000. 
// В следующих n строках задана матрица. 
// Элементы матрицы — целые числа, по модулю не превосходящие 1000. 
// В последних двух строках записаны координаты элемента (индексация начинается с нуля), соседей которого нужно найти.

// Формат вывода
// Напечатайте нужные числа в возрастающем порядке через пробел.

function TaskC(n, m, ...args){
  const matrix = args.slice(0, n).map(el => el.split(' ').map(Number));
  const y = args.at(-2);
  const x = args.at(-1);

  const findNeighbours = (x, y, matrix) => {
    const el = matrix[y][x]
    if(!el){
      throw new Error('There is no such element. Check the coordinates')
    }

    const topNCoords = y - 1 >= 0 ? {y: y - 1, x} : null;
    const bottomNCoords = y + 1 <= n - 1 ? {y: y + 1, x} : null;
    const rightNCoords = x + 1 <= m - 1 ? {y, x: x + 1} : null;
    const leftNCoords = x - 1 >= 0 ? {y, x: x - 1} : null;

    const coordsOfNeighbours = [topNCoords, bottomNCoords, rightNCoords, leftNCoords];
    const result = [];

    for(const coord of coordsOfNeighbours){
      if(coord){
        const el = matrix[coord.y][coord.x]
        result.push(el)
      }
    }

    return result
  }

  return findNeighbours(x,  y, matrix);
}

// console.log(TaskC(
//   4,
//   3,
//   '1 2 3',
//   '0 2 6',
//   '7 4 1',
//   '2 7 0',
//   3,
//   0
// )) //7 7

// console.log(TaskC(
//   4,
//   3,
//   '1 2 3',
//   '0 2 6',
//   '7 4 1',
//   '2 7 0',
//   0,
//   0,
// )) //0 2


//Task D
// Гоша решил убрать дни, когда ничего в Черепашеньке не заработал и не проиграл.
// Дан список заработанных очков. Нужно удалить из него нули. Дополнительную память больше О(1) использовать нельзя.
// Формат ввода:
// В первой строке одно число n, во второй - n целых чисел через пробел.

function TaskD(n, ...args) {
  let writeIndex = 0;

  for (let i = 0; i < args.length; i++) {
    if (args[i] !== 0) {
      args[writeIndex++] = args[i];
    }
  }

  args.length = writeIndex;

  return args;
}

console.log(TaskD(8, -1, 0, 0, 1, 2, -1, -4, 0)) //  -1, 1, 2, -1, -4